intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
import impl_libs += libcurl%lib{curl}

lib{co_curl}: {hxx ixx txx cxx}{** -version} $impl_libs $intf_libs
lib{co_curl}: hxx{version} # cxx{version}

hxx{version}: in{version.hpp.in} $src_root/manifest
# cxx{version}: in{version.cpp.in} $src_root/manifest
# {
#   in.mode = lax
#   # in.substitution = "${CO_CURL_VERSION}"@"$CO_CURL_VERSION$" # TODO: fix the version generation
# }

hxx{export}@./: cxx.importable = false

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

{hbmia obja}{*}: cxx.poptions += -DCO_CURL_STATIC_BUILD
{hbmis objs}{*}: cxx.poptions += -DCO_CURL_SHARED_BUILD

# Export options.
#
lib{co_curl}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $intf_libs
}

liba{co_curl}: cxx.export.poptions += -DCO_CURL_STATIC
libs{co_curl}: cxx.export.poptions += -DCO_CURL_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{co_curl}: bin.lib.version = "-$version.project_id"
else
  lib{co_curl}: bin.lib.version = "-$version.major.$version.minor"

# Install into the co_curl/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/co_curl/
  install.subdirs = true
}
